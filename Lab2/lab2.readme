#Digital Timer

Include your responses to the bold questions below. Include snippets of code that explain what you did. Deliverables are due next Tuesday. Post your lab reports as README.md pages on your GitHub, and post a link to that on your main class hub page.

##Part A. Solder your LCD panel
 ---
 ![LCD setup](https://github.com/Kunlong1994/-Interactive-Lab-Hub/blob/master/Lab2/LCD%20set%20up.png)
 /**************************************************************************
  This is an example for our Monochrome OLEDs based on SSD1306 drivers
  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98
  This example is for a 128x32 pixel display using I2C to communicate
  3 pins are required to interface (two I2C and one reset).
  Adafruit invests time and resources providing this open
  source code, please support Adafruit and open-source
  hardware by purchasing products from Adafruit!
  Written by Limor Fried/Ladyada for Adafruit Industries,
  with contributions from the open source community.
  BSD license, check license.txt for more information
  All text above, and the splash screen below must be
  included in any redistribution.
  **************************************************************************/

 #include <SPI.h>
 #include <Wire.h>
 #include <Adafruit_GFX.h>
 #include <Adafruit_SSD1306.h>

 #define SCREEN_WIDTH 128 // OLED display width, in pixels
 #define SCREEN_HEIGHT 32 // OLED display height, in pixels

 // Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
 #define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
 Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

 #define NUMFLAKES     10 // Number of snowflakes in the animation example

 #define LOGO_HEIGHT   16
 #define LOGO_WIDTH    16
 static const unsigned char PROGMEM logo_bmp[] =
 { B00000000, B11000000,
   B00000001, B11000000,
   B00000001, B11000000,
   B00000011, B11100000,
   B11110011, B11100000,
   B11111110, B11111000,
   B01111110, B11111111,
   B00110011, B10011111,
   B00011111, B11111100,
   B00001101, B01110000,
   B00011011, B10100000,
   B00111111, B11100000,
   B00111111, B11110000,
   B01111100, B11110000,
   B01110000, B01110000,
   B00000000, B00110000 };

 void setup() {
   pinMode(A0, OUTPUT); //lab asked us to read A0 output, so I'm setting it as such
   Serial.begin(9600);

   // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
   if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
     Serial.println(F("SSD1306 allocation failed"));
     for(;;); // Don't proceed, loop forever
   }

   // Show initial display buffer contents on the screen --
   // the library initializes this with an Adafruit splash screen.
   display.display();
   delay(2000); // Pause for 2 seconds

   // Clear the buffer
   display.clearDisplay();
   display.setTextSize(4);
   display.setTextColor(SSD1306_WHITE);
   display.cp437(true);
 }

 char a0_val[1];
 void loop() {
   dtostrf(digitalRead(A0),1,0,a0_val); //read digital output and convert to char array
   display.clearDisplay();
   display.setCursor(0,0);
   display.write("A0:");
   display.write(a0_val);

   display.display();
   delay(500);

 }

 void testdrawchar(void) {
   display.clearDisplay();

   display.setTextSize(1);      // Normal 1:1 pixel scale
   display.setTextColor(SSD1306_WHITE); // Draw white text
   display.setCursor(0, 0);     // Start at top-left corner
   display.cp437(true);         // Use full 256 char 'Code Page 437' font

   // Not all the characters will fit on the display. This is normal.
   // Library will draw what it can and the rest will be clipped.
   for(int16_t i=0; i<256; i++) {
     if(i == '\n') display.write(' ');
     else          display.write(i);
   }

   display.display();
   delay(2000);
 }

#Part B. Writing to the LCD


 **e. Include a copy of your Lowly Multimeter code in your lab write-up.**
 // include the library code:
 #include <LiquidCrystal.h>

 // initialize the library by associating any needed LCD interface pin
 // with the arduino pin number it is connected to
 const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
 LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

 int sensorPin = A0; //select the input pin for the potentiometer
 int sensorValue = 0; //variable to store the value coming from the sensor
 int sensorValueOld = 0;


 void setup() {
   // set up the LCD's number of columns and rows:
   lcd.begin(16, 2);
   sensorValue = analogRead(sensorPin);
 }

 void loop() {
   // turn off the display
   lcd.noDisplay();
   delay(500);
   sensorValue = analogRead(sensorPin);
   lcd.display();
   lcd.clear();
   lcd.print(sensorValue);
   delay(500);

 }


#Part C. Using a time-based digital sensor




#Part D. Make your Arduino sing!
**a. How would you change the code to make the song play twice as fast?**

Change  line "int noteDuration = 1000/noteDurations[thisNote];" to "int noteDuration = 500/noteDurations[thisNote];"

**b. What song is playing?**

StarWar

#Part E. Make your own timer
a. Make a short video showing how your timer works, and what happens when time is up!
I still don't have a kit so I used fritzing to try to simulate a circuit and write a program in arduino hoping it could work. It consists a button and led. After the button is pressed, the time button is pressed would be recorded and the timer will start to countdown for the same time, when time is up, the led will blink as an alarmã€‚ The code and circuit are modified from the tutorial from arduino offical guide (button, LiquidCrystalHelloWorld and whileloop) 
![LCD button LED timer](https://github.com/Kunlong1994/-Interactive-Lab-Hub/blob/master/Lab2/LCD_timer.png)
b. Post a link to the completed lab report your class hub GitHub repo.

 // include the library code:
 #include <LiquidCrystal.h>

 // initialize the library by associating any needed LCD interface pin
 // with the arduino pin number it is connected to
 const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
 LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

 int sensorPin = A0;    // input A0 for reading from the Potentiometer
 int sensorValue = 0;  //  save the value from the A0
 int outputValue = 0;  //save the map value scaled from 0 to 255

 const int buttonPin = 2; // pushbutton pin in arduino

 int countdown = 0;
 int alarm_triggered = 0;
 int ledPin = 7;

 int buttonState = 0;  // variable for reading the pushbutton status

 void setup() {
   // set up the LCD's number of columns and rows:
   lcd.begin(16, 2);


   //initialize button
   pinMode(buttonPin, INPUT_PULLUP);
   pinMode(ledPin, OUTPUT);

   Serial.begin (9600);
   Serial.println("Start");
 }

 void loop() {
   buttonState = digitalRead(buttonPin);

   while (buttonState == LOW) {
     countdown++;
     delay(1000);
     buttonState = digitalRead(buttonPin);
   }

   if (countdown !=0) {
     alarm_triggered = 1;
     Serial.print("alarm triggerd!");

   }

   lcd.setCursor(0, 0);
   lcd.print("Counter Set: ");
   lcd.print(countdown);
   delay(1000);

   while (countdown != 0) {
    lcd.print("Counting Down: ");
    lcd.print(counter);
    counter--;
    delay(1000);
   }

   if (alarm_triggered == 1) {
      Serial.print("Blinking!");

     lcd.print("Alarm On!");

     digitalWrite(ledPin, HIGH);
     delay(1000);
     digitalWrite(ledPin, LOW);
     delay(1000);


     lcd.print("Alarm Off!");
     alarm_triggered = 0;
   }
   Serial.print("End");

   // print the number of seconds since reset:
   //lcd.print(millis() / 1000);
 }
